@model DemoStore_Admin.Models.ViewModels.OrderViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
    <link href="https://cdn.jsdelivr.net/npm/simple-datatables@latest/dist/style.css" rel="stylesheet" />
    <link href="~/Content/styles.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/js/all.min.js" crossorigin="anonymous"></script>

    <script src="~/Asset/scripts.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js" crossorigin="anonymous"></script>

    <script src="https://cdn.jsdelivr.net/npm/simple-datatables@latest" crossorigin="anonymous"></script>

    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto|Varela+Round">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>


}



<div id="layoutSidenav_content">

    <main>
        <div class="container-fluid px-4">
            <div class="container-xl">
                <div class="table-responsive">
                    <div class="table-wrapper">


                        <div class="table-title">
                            <div class="row">
                                <div class="col-sm-5">
                                    <h2>Order <b>Management</b></h2>
                                </div>

                            </div>
                        </div>



                        @using (Html.BeginForm())
                        {
                            @Html.AntiForgeryToken()

                            <div class="form-horizontal">
                                <hr />
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <div class="form-group">
                                    @Html.LabelFor(model => model.OrderDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.OrderDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                                        @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    Customer
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.UserId, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ShipName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.ShipName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ShipName, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ShipAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.ShipAddress, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ShipAddress, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ShipPhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.ShipPhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ShipPhoneNumber, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.status, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.DropDownListFor(model => model.status, new List<SelectListItem>
                                                             { new SelectListItem{Text="Ordering", Value="1"},
                                                               new SelectListItem{Text="Taking", Value="2"},
                                                               new SelectListItem{Text="Shipping", Value="3"},
                                                               new SelectListItem{Text="Finish", Value="4"}}, "Please select", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <hr />

                                <!-- Navbar Search-->
                                <form class="d-none d-md-inline-block form-inline ms-auto me-0 me-md-3 my-2 my-md-0">
                                    <div class="input-group">
                                        <input class="form-control" type="text" id="txtSearch" placeholder="Search for.." title="Type in" />

                                    </div>
                                </form>
                                <div id="grdProduct"></div>

                                <hr />
                                <div class="uk-overflow-auto container" style='width: 70%'>
                                    <table class="uk-table uk-table-hover uk-table-middle uk-table-divider">

                                        <tr>
                                            <th class="uk-table-shrink"></th>
                                            <th class="uk-table-small sty"><h3>ITEM</h3></th>
                                            <th class="uk-table-small"></th>
                                            <th class="uk-width-small sty"><h3>PRICE</h3></th>
                                            <th class="uk-table-shrink uk-text-small sty"><h3>QUANTITY</h3></th>
                                            <th class="uk-table-shrink uk-text-small sty"><h3>TOTAL</h3></th>

                                        </tr>

                                        <tbody>
                                        </tbody>
                                    </table>
                                </div>


                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <input type="submit" value="Create" class="btn btn-primary btn-lg btn-block" />
                                    </div>
                                </div>

                            </div>
                        }

                        <div>
                            @Html.ActionLink("Back to List", "Index")
                        </div>
                    </div>

                </div>
            </div>



        </div>
    </main>
    <footer class="py-4 bg-light mt-auto">
        <div class="container-fluid px-4">
            <div class="d-flex align-items-center justify-content-between small">
                <div class="text-muted">Copyright &copy; Your Website 2021</div>
                <div>
                    <a href="#">Privacy Policy</a>
                    &middot;
                    <a href="#">Terms &amp; Conditions</a>
                </div>
            </div>
        </div>
    </footer>

</div>

<script>
         $(() => {
             let addToCartButtons = document.getElementsByClassName('btn-warning')
             let cartContainer = document.getElementsByTagName('tbody')[0]
             let quantityFields = document.getElementsByClassName('num')
             let delete_buttons = document.getElementsByClassName('uk-button-danger')
        getUsers();
             // picking up all the Add-To-Cart buttons
             for (let i = 0; i < addToCartButtons.length; i++) {
                 addToCartButtons[i].addEventListener('click', addToCart)

             }
        $('#txtSearch').on('keyup', () => {
            getUsers();
            // picking up all the Add-To-Cart buttons
            for (let i = 0; i < addToCartButtons.length; i++) {
                addToCartButtons[i].addEventListener('click', addToCart)

            }
        });
     });


    function getUsers() {

        $.ajax({
            url: '@Url.Action("SearchProducts", "Orders")',
            dataType: 'html',
            method: 'Get',
            data: { searchText: $('#txtSearch').val() },
            success: function (res) {
                $('#grdProduct').html('').html(res);
            },
            error: function (err) {
                console.log(err);
            }
        })

    };



    $(function () { // will trigger when the document is ready
        $('.datepicker').datepicker(); //Initialise any date pickers
    });


   
    // This function helps to add items to our cart
    function addToCart(event) {

        let btn = event.target
        let btnParent = btn.parentElement
        let itemImage = btnParent.getElementsByTagName("td")[5].src
        let itemName = btnParent.getElementsByTagName("td")[0].innerText
        let itemPrice = btnParent.getElementsByTagName("td")[4].innerText

        let itemContainer = document.createElement('tr')

        itemContainer.innerHTML = `
    <td><input class="uk-checkbox" type="checkbox"></td>
    <td><img class="uk-preserve-width uk-border-circle" src=${itemImage} width="40" alt=""></td>
    <td class="uk-table-link">
        <h3 class = "item-name">${itemName}</h3>
    </td>
    <td class="uk-text-truncate item-price"><h3>${itemPrice}</h3></td>
    <td><input type = 'number' class = 'num' value = '1'></td>
    <td class="uk-text-truncate total-price"><h3>${itemPrice}</h3></td>
    <td><button class="uk-button uk-button-danger" type="button">Remove</button></td>`

        cartContainer.append(itemContainer)


        // Accessing individual quantity fields
        for (let i = 0; i < quantityFields.length; i++) {
            quantityFields[i].value = 1
            quantityFields[i].addEventListener('change', totalCost)

        }

        // Accessing individual quantity fields
        for (let i = 0; i < delete_buttons.length; i++) {
            delete_buttons[i].addEventListener('click', removeItem)
        }

        grandTotal()


    }



    // This function helps to multiply the quantity and the price
    function totalCost(event) {
        let quantity = event.target
        quantity_parent = quantity.parentElement.parentElement
        price_field = quantity_parent.getElementsByClassName('item-price')[0]
        total_field = quantity_parent.getElementsByClassName('total-price')[0]
        price_field_content = price_field.innerText.replace('$', '')
        total_field.children[0].innerText = '$' + quantity.value * price_field_content
        grandTotal()
        if (isNaN(quantity.value) || quantity.value <= 0) {
            quantity.value = 1
        }



    }

    // This function helps to add up the total of the items
    function grandTotal() {
        let total = 0
        let grand_total = document.getElementsByClassName('grand-total')[0]
        all_total_fields = document.getElementsByClassName('total-price')
        for (let i = 0; i < all_total_fields.length; i++) {
            all_prices = Number(all_total_fields[i].innerText.replace('$', ''))
            total += all_prices
        }
        grand_total.children[0].innerText = "$" + total
        grand_total.children[0].style.fontWeight = 'bold'
        console.log(total)
    }


    function removeItem(event) {
        del_btn = event.target
        del_btn_parent = del_btn.parentElement.parentElement
        del_btn_parent.remove()
        console.log(del_btn)
        grandTotal()

    }





</script>